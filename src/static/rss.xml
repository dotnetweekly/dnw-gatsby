<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Mon, 19 Oct 2020 15:47:49 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[Rest vs gRPC – performance benchmark in .Net Core 3.1]]></title>
            <link>https://www.dotnetweekly.com/articles/rest-vs-grpc-performance-benchmark-in-net-core-31</link>
            <guid>https://www.dotnetweekly.com/articles/rest-vs-grpc-performance-benchmark-in-net-core-31</guid>
            <pubDate>Mon, 19 Oct 2020 20:23:41 GMT</pubDate>
            <content:encoded><![CDATA[- gRPC CodeFirst approach,
- The performance benchmark for gRPC vs REST communication in .Net core 3.1,
- How many does cost to open gRPC channel & why is worth to scope it like HttpClient. ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[4 Ways to Handle Test Data for Your End-to-End Tests]]></title>
            <link>https://www.dotnetweekly.com/articles/4-ways-to-handle-test-data-for-your-end-to-end-tests</link>
            <guid>https://www.dotnetweekly.com/articles/4-ways-to-handle-test-data-for-your-end-to-end-tests</guid>
            <pubDate>Mon, 19 Oct 2020 15:46:20 GMT</pubDate>
            <content:encoded><![CDATA[One of the most common problems when running automated end-to-end tests for a web application is how to handle test data. End-to-end tests often create, update, and delete all kinds of information as it goes through your test cases in the application. Inevitably, you'll run into problems because previous test runs leave behind a trail of stale data that may interfere with your current test execution.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dynamically invoking a generic method with Reflection in .NET C#]]></title>
            <link>https://www.dotnetweekly.com/articles/dynamically-invoking-a-generic-method-with-reflection-in-net-c</link>
            <guid>https://www.dotnetweekly.com/articles/dynamically-invoking-a-generic-method-with-reflection-in-net-c</guid>
            <pubDate>Mon, 19 Oct 2020 15:45:27 GMT</pubDate>
            <content:encoded><![CDATA[In this video, we learn how about dynamically invoking a generic method with reflection in .NET C#.

When using a generic method, the generic argument (often referred to as `T`) must be provided as a known type at compile time. However, sometimes you may have a scenario where you must call a generic method using a type that it not known until run time. This can be problematic and usually results in using a large number of if/else statements.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Using Azure Identity with Azure SQL, Graph, and Entity Framework]]></title>
            <link>https://www.dotnetweekly.com/articles/using-azure-identity-with-azure-sql-graph-and-entity-framework</link>
            <guid>https://www.dotnetweekly.com/articles/using-azure-identity-with-azure-sql-graph-and-entity-framework</guid>
            <pubDate>Mon, 19 Oct 2020 15:45:02 GMT</pubDate>
            <content:encoded><![CDATA[My name is Mickaël Derriey and I work at Telstra Purple, the largest IT consultancy in Australia. I’m part of an internal team where my main focus is to support .NET applications we developed in-house, most of which are hosted in Azure and integrate with a variety of workloads like Azure SQL, Blob Storage, or the Microsoft Graph API.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blazor Gamedev – part 11: improved assets loading]]></title>
            <link>https://www.dotnetweekly.com/articles/blazor-gamedev-part-11-improved-assets-loading</link>
            <guid>https://www.dotnetweekly.com/articles/blazor-gamedev-part-11-improved-assets-loading</guid>
            <pubDate>Mon, 19 Oct 2020 02:01:00 GMT</pubDate>
            <content:encoded><![CDATA[Hi All! Welcome back to part 11 of our Blazor 2d Gamedev series. Today we’re going to refactor and improve the code responsible of loading assets. Our goal is to have a centralized asset loading mechanism and avoid the hassle of having to reference all our assets in a Blazor page or component.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introducing C# 9: Attributes on local functions]]></title>
            <link>https://www.dotnetweekly.com/articles/introducing-c-9-attributes-on-local-functions</link>
            <guid>https://www.dotnetweekly.com/articles/introducing-c-9-attributes-on-local-functions</guid>
            <pubDate>Mon, 19 Oct 2020 01:01:24 GMT</pubDate>
            <content:encoded><![CDATA[Well. It has been a while since I wanted to write this post but I couldn’t find any relevant code example to illustrate it. As you might have guessed C# 9 now allows attributes on local functions (as well as parameter attributes of local functions). To illustrate this I will show you how to use the Conditional attribute to perform conditional local function executions, for example, depending on the environment in which we are running our program. Applying it to local functions can be interesting in this case, however I admit that for the moment it is the only relevant example but it does not matter it is not necessarily the functionality of C# 9 either. more popular now. Finally we will compare with the C# 9 forward to finish our example.]]></content:encoded>
        </item>
    </channel>
</rss>
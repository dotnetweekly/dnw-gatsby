<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Thu, 28 Jan 2021 02:42:59 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[Self-hosted integration tests in ASP.NET]]></title>
            <link>https://www.dotnetweekly.com/articles/self-hosted-integration-tests-in-aspnet</link>
            <guid>https://www.dotnetweekly.com/articles/self-hosted-integration-tests-in-aspnet</guid>
            <pubDate>Thu, 28 Jan 2021 01:00:51 GMT</pubDate>
            <content:encoded><![CDATA[In 2020 I developed a sizeable code base for an online restaurant REST API. In the spirit of outside-in TDD, I found it best to test the HTTP behaviour of the API by actually interacting with it via HTTP.

Sometimes ASP.NET offers more than one way to achieve the same end result. For example, to return 200 OK, you can use both OkObjectResult and ObjectResult. I don't want my tests to be coupled to such implementation details, so by testing an API via HTTP instead of using the ASP.NET object model, I decouple the two.

You can easily self-host an ASP.NET web API and test it using an HttpClient. In this article, I'll show you how I went about it.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The NuGet packages we use to build elmah.io]]></title>
            <link>https://www.dotnetweekly.com/articles/the-nuget-packages-we-use-to-build-elmahio</link>
            <guid>https://www.dotnetweekly.com/articles/the-nuget-packages-we-use-to-build-elmahio</guid>
            <pubDate>Tue, 26 Jan 2021 07:03:30 GMT</pubDate>
            <content:encoded><![CDATA[Get inspired by this list of NuGet packages we use to build elmah.io. Learn about each package, how we use it, and what we like about it.]]></content:encoded>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week 39 Year 2019</title>
        <link>https://www.dotnetweekly.com/week/39/year/2019?feed=rss</link>
        <description></description>
        <lastBuildDate>Mon, 30 Sep 2019 04:46:57 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Videos</category>
        <category>Articles</category>
        <category>Events-training</category>
        <item>
            <title><![CDATA[Xamarin with James Montemagno]]></title>
            <link>https://www.dotnetweekly.com/articles/xamarin-with-james-montemagno</link>
            <guid>https://www.dotnetweekly.com/articles/xamarin-with-james-montemagno</guid>
            <pubDate>Thu, 26 Sep 2019 21:41:50 GMT</pubDate>
            <content:encoded><![CDATA[Episode Summary

In this episode of Adventures in .NET, James Montemagno, a PM in the developer division at Microsoft working with Xamarin shares with the panel all of the exciting things happening in the Xamarin world. Charles Max Wood invites listeners to check out James’s appearances on a different DevChatTV podcast, The iPhreaks Show. Charles expresses his excitement to see Xamarin from a .NET perspective.

James starts the discussion by sharing how he got into Xamarin and .NET. He explains what he loves about .NET. James worked for Xamarin during the transition into Microsoft, he shares what it was like and how the unification of the two made their products even better. The panel discusses the changes in Microsoft’s practices over the past ten years, becoming more opensource friendly and less focused on selling products.

What is Xamarin, is the next thing the panel answers. James explains that Xamarin helps developers build native apps in C#. He goes on to explain how the versions of Xamarin change based on the platform, Android, iOS and tooling inside visual studio.

The topic turns to how Xamarin runs. James explains that there is a common theme in Xamarin, flexibility. Choosing how Xamarin is run is up to the developer, who can use AOT (ahead of time) or JIT (just in time). Charles explains what AOT and JIT mean and how they affect application size and performance. James explains how Xamarin runs differently for Android and iOS.

James introduces a brand new mode called Startup Tracing and explains how it can reduce the start-up time for your Xamarin apps by up to 60% by using a small trace of AOT. He shares the future goals for this mode and explains that it is free and can be used today.

The next concern the panel has is about sharing code between different platforms and how this works with Xamarin. James explains that this problem is solved with Xamarin forms, Xamarin forms has everything a mobile app developer could want. In Xamarin forms developers can create pages to share cross-platform or simply build their whole app for all platforms. James even explains how a developer can make platform-specific adjustments to the code.

James defines customer-driven development and explains how this allows them to create the best product for developers. The flexibility and capabilities in UI’s and controls allows developers to choose what their app looks like. Caleb asks about the built template components that allows the developer to architect the navigation in their applications. James explains one of the tools, Shell and how it helps you set up your navigation how you want it while handling all the messiness with minimal code.

Charles asks James about library integration into Xamarin. James starts by sharing what comes in the box with Xamarin, 100% API coverage for both Android and iOS. How this works is, a team looks at the needs of developers and makes a list of the necessary, popular and desired libraries and creates API bindings for them. Libraries that don’t make that list can have a binding generated with Xamarins binding generator, which will include the necessary features needed to use the library.

The panel changes the topic to the new Xamarin features that James is most excited for. James mentions a one-stop library called Xamarin essentials that will hold all the things a developer might need. He also includes Xaml hot reload for Xamarin forms, this feature will create a better level of productivity as it reloads around typos and mistakes allowing developers to stay in their workflow. The panel discusses the other benefits of a feature like this. Caleb Wells warns how addictive a good hot reload can be.

The episode ends with James giving advice and resources for getting into Xamarin. Charles praises the Microsoft documentation. Caleb gives an endorsement for Microsoft Learn. Charles invites listeners to suggest topics and guests at devchat.tv.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Async and C# 8 with Filip Ekberg]]></title>
            <link>https://www.dotnetweekly.com/articles/async-and-c-8-with-filip-ekberg</link>
            <guid>https://www.dotnetweekly.com/articles/async-and-c-8-with-filip-ekberg</guid>
            <pubDate>Thu, 26 Sep 2019 21:40:01 GMT</pubDate>
            <content:encoded><![CDATA[In this week’s episode of Adventures in .NET the panel interviews Filip Ekberg, Microsoft MVP, about using async, await, and the new features in C# 8. They begin by discussing the evolution of running tasks and multithreading in async. Filip describes the evolution beginning with background workers, through task parallel libraries finally to async and await. The panel considers how managing tasks has been made almost too easy.

Filip explains that there has been a drive to make everything asynchronous but explains that this approach doesn’t always make sense. The panel asks Filip when a developer should use async and await. If an application has a UI, Filip encourages the use of async and await and he outlines the benefits. He also explains that if someone wants to be a full-stack developer they need to understand async and await on both the serverside and clientside.

The panel wonders what the most common async and await mistakes are in .NET. Filip shares a couple of the most common mistakes he sees. The first is deadlocking an application because of the inappropriate methods such as .result and .wait on tasks. The second is marking methods as async without running the await keyword. He explains what these mistakes do to your application and gives advice on avoiding these mistakes.

The panel expresses past frustrations in making all methods especially tops methods when in ASP.NET. Filip gives the panel advice on making it asynchronous top to bottom and ways to handle those aggravating top methods. He also explains how to use the await keyword and state machines effectively.

Debugging in async is the next topic the panel considers. Filip explains why debugging is so tricky in asynchronous applications. He gives a few tips, his biggest piece of advice is to update Visual Studio and you should get more help in debugging than from older versions.

The panel moves on to discuss C# 8. Filip explains that C# is his language, he loves it! He shares three new changes to the language features in C# 8. They made changes to how tuples work, pattern matching and null reference types.

Tuples are the first change the panel considers. Filip explains what tuples are and what they do. Tuples allow you to represent a type without actually using that type. The panel considers how tuples have changed in C# 8, they are still position based but are more flexible in calling them.

Next, the panel discusses null reference types. The control null reference types allow over nulls is considered. Filip shares some recommendations for using null reference types. The panel considers what might happen if someone were to use null reference types in an existing application. The wonder if it would have any benefit or if it would break the whole application.

The final feature they discuss is pattern matching. Filip explains the benefit of using the new pattern matching with the new tuples feature in C# 8. The new pattern matching can be used to find tupple patterns, position patterns, and property patterns.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Step-by-Step Guide to Migrating a Project from ASP.NET MVC to ASP.NET Core]]></title>
            <link>https://www.dotnetweekly.com/articles/a-step-by-step-guide-to-migrating-a-project-from-aspnet-mvc-to-aspnet-core</link>
            <guid>https://www.dotnetweekly.com/articles/a-step-by-step-guide-to-migrating-a-project-from-aspnet-mvc-to-aspnet-core</guid>
            <pubDate>Thu, 26 Sep 2019 04:18:21 GMT</pubDate>
            <content:encoded><![CDATA[Here is a practical guide on migrating a project from ASP.NET MVC framework to ASP.NET Core. Step-by-step instruction written by the team of nopCommerce open-source project can be easily applied to any ASP.NET MVC project.
It also describes why you might need to upgrade, and why projects that do not yet keep up with pace should consider it.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Optimizing reflection in C# via dynamic code generation]]></title>
            <link>https://www.dotnetweekly.com/articles/optimizing-reflection-in-c-via-dynamic-code-generation</link>
            <guid>https://www.dotnetweekly.com/articles/optimizing-reflection-in-c-via-dynamic-code-generation</guid>
            <pubDate>Thu, 26 Sep 2019 04:17:52 GMT</pubDate>
            <content:encoded><![CDATA[I have recently been spending a lot of time working on ComputeSharp, a .NET Standard 2.1 library written in C# 8.0 that lets you run code in parallel on the GPU through DX12 and dynamically generated HLSL compute shaders. That is a somewhat unintuitive description for a library that does something conceptually simple: it runs code in parallel in a manner similar to Parallel.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Free Blazor Training Course]]></title>
            <link>https://www.dotnetweekly.com/articles/free-blazor-training-course</link>
            <guid>https://www.dotnetweekly.com/articles/free-blazor-training-course</guid>
            <pubDate>Thu, 26 Sep 2019 04:16:53 GMT</pubDate>
            <content:encoded><![CDATA[Welcome to this short introduction to Blazor! This new Microsoft framework uses a unique approach to leverage your existing C# and .NET skills to create single-page applications running in web browsers. The technology that makes this possible is called WebAssembly, an open standard supported directly by current browsers on desktop and mobile platforms. You write C# and Razor code instead of JavaScript, and the compiled app runs natively on the client.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Python for Beginners]]></title>
            <link>https://www.dotnetweekly.com/articles/python-for-beginners</link>
            <guid>https://www.dotnetweekly.com/articles/python-for-beginners</guid>
            <pubDate>Thu, 26 Sep 2019 04:05:28 GMT</pubDate>
            <content:encoded><![CDATA[Probably the largest hurdle when learning any new programming language is simply knowing where to get started. This is why we, Chris and Susan, decided to create this series about Python for Beginners!

Even though we won't cover everything there is to know about Python in the course, we want to make sure we give you the foundation on programming in Python, starting from common everyday code and scenarios. At the end of the course, you'll be able to go and learn on your own, for example with docs, tutorials, or books.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Announcing free C#, .NET, and ASP.NET for beginners video courses and tutorials]]></title>
            <link>https://www.dotnetweekly.com/articles/announcing-free-c-net-and-aspnet-for-beginners-video-courses-and-tutorials</link>
            <guid>https://www.dotnetweekly.com/articles/announcing-free-c-net-and-aspnet-for-beginners-video-courses-and-tutorials</guid>
            <pubDate>Thu, 26 Sep 2019 04:03:56 GMT</pubDate>
            <content:encoded><![CDATA[If you've been thinking about learning C#, now is the time to jump in! I've been working on this project for months and I'm happy to announce http://dot.net/videos 

There are nearly a hundred short videos (with more to come!) that will teach you topics like C# 101, .NET, making desktop apps, making ASP.NET web apps, learning containers and Dockers, or even starting with Machine Learning. There's a ton of great, slow-paced beginner videos. Most are less than 10 minutes long and all are organized into Playlists on YouTube!

If you are getting started, I'd recommend starting with these three series in this order - C#, .NET, then ASP.NET. After that, pick the topics that make you the happiest.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thinking in React Hooks]]></title>
            <link>https://www.dotnetweekly.com/articles/thinking-in-react-hooks</link>
            <guid>https://www.dotnetweekly.com/articles/thinking-in-react-hooks</guid>
            <pubDate>Thu, 26 Sep 2019 04:02:50 GMT</pubDate>
            <content:encoded><![CDATA[React introduced hooks one year ago, and they've been a game-changer for a lot of developers. There are tons of how-to introduction resources out there, but I want to talk about the fundamental mindset change when switching from React class components to function components + hooks.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HTTP/3: the past, the present, and the future]]></title>
            <link>https://www.dotnetweekly.com/articles/http-3-the-past-the-present-and-the-future</link>
            <guid>https://www.dotnetweekly.com/articles/http-3-the-past-the-present-and-the-future</guid>
            <pubDate>Thu, 26 Sep 2019 04:02:32 GMT</pubDate>
            <content:encoded><![CDATA[QUIC and HTTP/3 are very exciting standards, promising to address many of the shortcomings of previous standards and ushering in a new era of performance on the web. So how do we go from exciting standards documents to working implementation?

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[.NET Core [heart] gRPC]]></title>
            <link>https://www.dotnetweekly.com/articles/net-core-heart-grpc</link>
            <guid>https://www.dotnetweekly.com/articles/net-core-heart-grpc</guid>
            <pubDate>Thu, 26 Sep 2019 04:02:13 GMT</pubDate>
            <content:encoded><![CDATA[grpc-dotnet packages have just been released to NuGet.org and are already available for use in your projects. These packages also require the latest .NET Core 3.0 shared framework. You can download the .NET Core 3.0 SDK for your dev machine and build servers from the .NET Core 3.0 download page to acquire the shared framework.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Announcing .NET Core 3.0]]></title>
            <link>https://www.dotnetweekly.com/articles/announcing-net-core-30</link>
            <guid>https://www.dotnetweekly.com/articles/announcing-net-core-30</guid>
            <pubDate>Thu, 26 Sep 2019 04:01:19 GMT</pubDate>
            <content:encoded><![CDATA[We’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and improving performance across the board. C# 8 is also part of this release, which includes nullable, async streams, and more patterns. F# 4.7 is included, and focused on relaxing syntax and targeting .NET Standard 2.0. You can start updating existing projects to target .NET Core 3.0 today. The release is compatible with previous versions, making updating easy.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Exploring .NET Core 3.0. What's New?]]></title>
            <link>https://www.dotnetweekly.com/articles/exploring-net-core-30-whats-new</link>
            <guid>https://www.dotnetweekly.com/articles/exploring-net-core-30-whats-new</guid>
            <pubDate>Tue, 24 Sep 2019 11:07:45 GMT</pubDate>
            <content:encoded><![CDATA[To celebrate 🎉 of .NET Core 3, here's an overview with everything you need to know about the latest release of the well-known Microsoft development platform!]]></content:encoded>
        </item>
    </channel>
</rss>
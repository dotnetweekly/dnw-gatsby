<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Mon, 12 Aug 2019 03:10:37 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[Debug & Catch Exceptions in Visual Studio: The Complete Guide]]></title>
            <link>https://www.dotnetweekly.com/articles/debug-and-catch-exceptions-in-visual-studio-the-complete-guide</link>
            <guid>https://www.dotnetweekly.com/articles/debug-and-catch-exceptions-in-visual-studio-the-complete-guide</guid>
            <pubDate>Mon, 12 Aug 2019 16:45:54 GMT</pubDate>
            <content:encoded><![CDATA[One of the most important concepts in modern programming is Exceptions. They were introduced in the 60â€™s with LISP and eventually made their way to practically all modern programming languages.

The simple concept is this: When some kind of error occurs during runtime, the execution will terminate and an Exception will be thrown. This will cause the stack to unwind until an appropriate Exception Handler is found. Itâ€™s a brilliant concept really. ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue.js 3: Future-Oriented Programming]]></title>
            <link>https://www.dotnetweekly.com/articles/vuejs-3-future-oriented-programming</link>
            <guid>https://www.dotnetweekly.com/articles/vuejs-3-future-oriented-programming</guid>
            <pubDate>Mon, 12 Aug 2019 16:44:44 GMT</pubDate>
            <content:encoded><![CDATA[If you are interested in Vue.js, you probably know about the 3rd version of this framework, which will be released shortly (if you are reading this article from the future, I hope itâ€™s still relevant ðŸ˜‰). The new version is under active development for now, but all possible features can be found in separate RFC (request for comments) repository: https://github.com/vuejs/rfcs. One of them, function-api, can dramatically change the style of developing Vue apps.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SOLID Design: The Single Responsibility Principle (SRP)]]></title>
            <link>https://www.dotnetweekly.com/articles/solid-design-the-single-responsibility-principle-srp</link>
            <guid>https://www.dotnetweekly.com/articles/solid-design-the-single-responsibility-principle-srp</guid>
            <pubDate>Mon, 12 Aug 2019 16:43:54 GMT</pubDate>
            <content:encoded><![CDATA[SRP is a principle that cannot be easily inferred from its definition. Moreover the SRP lets a lot of room for own opinions and interpretations. So what is SRP about? SRP is about logic partitioning into code: which logic should be declared in which class. Something to keep in mind is that SRP is the only SOLID principle not related to the usage of abstraction and polymorphism.

The goal of this post is to propose objective and concrete guidelines to increase your classes compliance with SRP, and in-fine, increase the maintainability of your code.]]></content:encoded>
        </item>
    </channel>
</rss>
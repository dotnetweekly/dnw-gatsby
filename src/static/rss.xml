<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Wed, 10 Jun 2020 16:16:54 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[Implementing Role-based and Claims-based Authorization in ASP.NET Core using Policies]]></title>
            <link>https://www.dotnetweekly.com/articles/implementing-role-based-and-claims-based-authorization-in-aspnet-core-using-policies</link>
            <guid>https://www.dotnetweekly.com/articles/implementing-role-based-and-claims-based-authorization-in-aspnet-core-using-policies</guid>
            <pubDate>Wed, 10 Jun 2020 15:30:53 GMT</pubDate>
            <content:encoded><![CDATA[In article, let's understand in-detail about what are role-based and claim-based authorization mechanisms and how we can implement them in asp.net core 3.1 using the Authorization middleware, with a working example.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to Use Attribute Directives to Avoid Repetition in Angular Templates]]></title>
            <link>https://www.dotnetweekly.com/articles/how-to-use-attribute-directives-to-avoid-repetition-in-angular-templates</link>
            <guid>https://www.dotnetweekly.com/articles/how-to-use-attribute-directives-to-avoid-repetition-in-angular-templates</guid>
            <pubDate>Wed, 10 Jun 2020 09:23:24 GMT</pubDate>
            <content:encoded><![CDATA[In this post, I will show you how attribute directives in Angular provide a way to adapt UI elements to your components and services and setting default values to them.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Use GitHub actions to publish NuGet packages]]></title>
            <link>https://www.dotnetweekly.com/articles/use-github-actions-to-publish-nuget-packages</link>
            <guid>https://www.dotnetweekly.com/articles/use-github-actions-to-publish-nuget-packages</guid>
            <pubDate>Tue, 09 Jun 2020 21:36:00 GMT</pubDate>
            <content:encoded><![CDATA[Here is how I automated pushing packages to nuget.org for FluentEmail.

- Create a Github Action that runs on push to the master branch
- Use Publish Nuget action to package and publish nuget packages
- Create a Nuget.org API key and set it as a GitHub secret
- Nuget packages are published on push to master!]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Pack your .NET program to a single .exe file with PostSharp Community]]></title>
            <link>https://www.dotnetweekly.com/articles/pack-your-net-program-to-a-single-exe-file-with-postsharp-community</link>
            <guid>https://www.dotnetweekly.com/articles/pack-your-net-program-to-a-single-exe-file-with-postsharp-community</guid>
            <pubDate>Tue, 09 Jun 2020 14:43:51 GMT</pubDate>
            <content:encoded><![CDATA[Last month, PostSharp released PostSharp.Community.Packer, a free and open-source tool that you can use to pack your .NET Framework application into a single .exe file for distribution. You can now easily merge all your .dlls into your main .exe file on .NET Framework for free.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[.NET/C# newsletters to subscribe to - Keep up with the news]]></title>
            <link>https://www.dotnetweekly.com/articles/net-c-newsletters-to-subscribe-to-keep-up-with-the-news</link>
            <guid>https://www.dotnetweekly.com/articles/net-c-newsletters-to-subscribe-to-keep-up-with-the-news</guid>
            <pubDate>Tue, 09 Jun 2020 06:25:36 GMT</pubDate>
            <content:encoded><![CDATA[Get news about .NET, C#, ASP.NET Core, and much more directly in your inbox. With this list of the ultimate newsletters, you will never miss important news.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[File Upload in ASP.NET Core MVC – File System & Database]]></title>
            <link>https://www.dotnetweekly.com/articles/file-upload-in-aspnet-core-mvc-file-system-and-database</link>
            <guid>https://www.dotnetweekly.com/articles/file-upload-in-aspnet-core-mvc-file-system-and-database</guid>
            <pubDate>Mon, 08 Jun 2020 18:31:53 GMT</pubDate>
            <content:encoded><![CDATA[In this article, let’s go through one of the most searched queries on Google, “File Upload in ASP.NET Core MVC”. Uploading Images or other documents is a very basic and common requirement when it comes to building anything from a simple application to an enterprise-level solution. Let’s build a small application with which you could upload files of any type to a file system location or to a centralized database table.

File Upload is quite important for any kind of application, right from saving a User’s Profile Picture to storing some important documents. Files can be uploaded to either the Server’s Storage or to a Centralized Database. ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Clone Dashboard in Azure Portal]]></title>
            <link>https://www.dotnetweekly.com/articles/clone-dashboard-in-azure-portal</link>
            <guid>https://www.dotnetweekly.com/articles/clone-dashboard-in-azure-portal</guid>
            <pubDate>Mon, 08 Jun 2020 05:47:08 GMT</pubDate>
            <content:encoded><![CDATA[You can clone the dashboard in Azure Portal. The cloning dashboard helps quickly extend any existing dashboard, that either you can share and use for your monitoring purpose. You can create your dashboards such as Azure service health dashboard or any other Azure services monitoring or data flow dashboard, and it could be useful sharing the dashboard with others in case they need the same. Some cases may require additional charges, or you may want to take out some of the details.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introducing YARP Preview 1]]></title>
            <link>https://www.dotnetweekly.com/articles/introducing-yarp-preview-1</link>
            <guid>https://www.dotnetweekly.com/articles/introducing-yarp-preview-1</guid>
            <pubDate>Mon, 08 Jun 2020 05:44:36 GMT</pubDate>
            <content:encoded><![CDATA[YARP is a project to create a reverse proxy server. It started when we noticed a pattern of questions from internal teams at Microsoft who were either building a reverse proxy for their service or had been asking about APIs and technology for building one, so we decided to get them all together to work on a common solution, which has become YARP.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fluent Validation in ASP.NET Core 3 – Powerful Validations]]></title>
            <link>https://www.dotnetweekly.com/articles/fluent-validation-in-aspnet-core-3-powerful-validations</link>
            <guid>https://www.dotnetweekly.com/articles/fluent-validation-in-aspnet-core-3-powerful-validations</guid>
            <pubDate>Mon, 08 Jun 2020 05:44:07 GMT</pubDate>
            <content:encoded><![CDATA[When it comes to Validating Models, aren’t we all leaning towards Data Annotations? There are quite a lot of serious issues with this approach for a scalable system. There is a library, Fluent Validations that can turn up the validation game to a whole new level, giving you total control.

In this article, we will talk about Fluent Validation and it’s implementation in ASP.NET Core Applications. We will discuss the preferred alternative to Data Annotations and implement it in an ASP.Net core API. Source code will be provided at the end of the article.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ASP.NET Core 3.1 Webhook Implementation Using Pub/Sub]]></title>
            <link>https://www.dotnetweekly.com/articles/aspnet-core-31-webhook-implementation-using-pub-sub</link>
            <guid>https://www.dotnetweekly.com/articles/aspnet-core-31-webhook-implementation-using-pub-sub</guid>
            <pubDate>Mon, 08 Jun 2020 05:43:05 GMT</pubDate>
            <content:encoded><![CDATA[In this article, I will show you the basics of the Webhook mechanism that uses a publish-subscribe pattern in the ASP.NET CORE 3.1 project.

What is Webhook
Webhooks are user-defined HTTP callbacks. They are usually triggered by some events, such as pushing code to a repository or a comment being posted to a blog. When that event occurs, the source site makes an HTTP request to the URL configured for the Webhook. Users can configure them to cause events on one site to invoke behavior on another.]]></content:encoded>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Sat, 03 Oct 2020 18:23:43 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <category>Events-training</category>
        <category>Videos</category>
        <category>Libraries-Tools</category>
        <item>
            <title><![CDATA[Setting environment variables for ASP.NET Core apps in a Helm chart]]></title>
            <link>https://www.dotnetweekly.com/articles/setting-environment-variables-for-aspnet-core-apps-in-a-helm-chart</link>
            <guid>https://www.dotnetweekly.com/articles/setting-environment-variables-for-aspnet-core-apps-in-a-helm-chart</guid>
            <pubDate>Fri, 02 Oct 2020 19:20:24 GMT</pubDate>
            <content:encoded><![CDATA[In the previous post I described the .NET solution that we're deploying. It consists of two applications, TestApp.Api which is a default ASP.NET Core web API project, and a TestApp.Service which is an empty web project. The TestApp.Service represents a "headless" service, that would be handling messages from an event queue using something like NServiceBus or MassTransit.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Deploying a .NET desktop application using MSIX]]></title>
            <link>https://www.dotnetweekly.com/articles/deploying-a-net-desktop-application-using-msix</link>
            <guid>https://www.dotnetweekly.com/articles/deploying-a-net-desktop-application-using-msix</guid>
            <pubDate>Fri, 02 Oct 2020 19:17:13 GMT</pubDate>
            <content:encoded><![CDATA[MSIX is a Windows app package format that provides a modern packaging experience to all Windows apps. The MSIX package format preserves the functionality of existing app packages and/or install files in addition to enabling new, modern packaging and deployment features to Win32, WPF, and Windows Forms apps. MSIX provides useful features such as auto-updates, file associations, clean uninstall, managability (GPO / PowerShell), etc.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Windows Performance Analyzer “WPA” Intro]]></title>
            <link>https://www.dotnetweekly.com/articles/windows-performance-analyzer-wpa-intro</link>
            <guid>https://www.dotnetweekly.com/articles/windows-performance-analyzer-wpa-intro</guid>
            <pubDate>Fri, 02 Oct 2020 19:14:36 GMT</pubDate>
            <content:encoded><![CDATA[If you do a search online for WPA, you might find information for protecting your Wi-Fi, but that is a different type of WPA.

In the performance & diagnostics space, WPA stands for Windows Performance Analyzer, a friendly but intricate UI that allows for developers and analysts to deep dive into performance traces captured on Windows. It's great for discovering why CPU utilization is high? How much memory is being used in the system per process? Why does WPA itself use so much memory?]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[.NET Conf 2020 | November 10-12]]></title>
            <link>https://www.dotnetweekly.com/articles/net-conf-2020-november-10-12</link>
            <guid>https://www.dotnetweekly.com/articles/net-conf-2020-november-10-12</guid>
            <pubDate>Fri, 02 Oct 2020 19:10:57 GMT</pubDate>
            <content:encoded><![CDATA[.NET Conf is a free, three day virtual developer event co-organized by the .NET community and Microsoft. This year .NET 5.0 will launch at .NET Conf 2020! Come celebrate and learn about the new release. We're also celebrating our 10th anniversary and we're working on a few more surprises. You won't want to miss this one.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Xamarin.Forms 5 Preview: Advanced UI Controls for Beautiful Apps]]></title>
            <link>https://www.dotnetweekly.com/articles/xamarinforms-5-preview-advanced-ui-controls-for-beautiful-apps</link>
            <guid>https://www.dotnetweekly.com/articles/xamarinforms-5-preview-advanced-ui-controls-for-beautiful-apps</guid>
            <pubDate>Fri, 02 Oct 2020 18:21:54 GMT</pubDate>
            <content:encoded><![CDATA[Xamarin.Forms 5 brings to stable release features that you have seen in preview over the latest several 4.x releases. This includes solid and gradient Brushes, CarouselView, drag-and-drop, RadioButton, Shapes, and SwipeView. These new features inject new creative potential for your application designs to create beautiful, interactive experiences.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Back to Machine Learning Basics – Decision Tree & Random Forest]]></title>
            <link>https://www.dotnetweekly.com/articles/back-to-machine-learning-basics-decision-tree-and-random-forest</link>
            <guid>https://www.dotnetweekly.com/articles/back-to-machine-learning-basics-decision-tree-and-random-forest</guid>
            <pubDate>Tue, 29 Sep 2020 23:52:17 GMT</pubDate>
            <content:encoded><![CDATA[In a previous couple of articles, we explored some basic machine learning algorithms. Thus far we covered some simple regression algorithms, classification algorithms and we started with algorithms that can be used for both types of problems. We used technologies like TensorFlow, Pytorch and SciKit Learn for the implementation and application of these algorithms. Apart from that we used optimization techniques such as Gradient Descent. So far we have covered:

Linear Regression
Simple Classification Algorithms
Support Vector Machine]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Don't Let Your .NET Applications Fail: Resiliency with Polly]]></title>
            <link>https://www.dotnetweekly.com/articles/dont-let-your-net-applications-fail-resiliency-with-polly</link>
            <guid>https://www.dotnetweekly.com/articles/dont-let-your-net-applications-fail-resiliency-with-polly</guid>
            <pubDate>Tue, 29 Sep 2020 23:51:51 GMT</pubDate>
            <content:encoded><![CDATA[One aspect of application development that is often overlooked, especially by beginner developers is application resilience.
A lot of tutorials often focus on the happy path of execution, omitting the details of potential errors that can occur.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Azure Container Instances (ACI) under the hood]]></title>
            <link>https://www.dotnetweekly.com/articles/azure-container-instances-aci-under-the-hood</link>
            <guid>https://www.dotnetweekly.com/articles/azure-container-instances-aci-under-the-hood</guid>
            <pubDate>Tue, 29 Sep 2020 05:42:39 GMT</pubDate>
            <content:encoded><![CDATA[Have you ever wondered what's going on under the hood for serverless offerings like Azure Container Instances? MacKenzie Olson shows Scott Hanselman the latest innovations in the infrastructure that powers ACI and a peek at the product roadmap, including a demo of the managed identity experience coming soon.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[TodoMVC Full Stack with Azure Static WebApps, Node and Azure SQL #beginners #node #sql #serverless]]></title>
            <link>https://www.dotnetweekly.com/articles/todomvc-full-stack-with-azure-static-webapps-node-and-azure-sql-beginners-node-sql-serverless</link>
            <guid>https://www.dotnetweekly.com/articles/todomvc-full-stack-with-azure-static-webapps-node-and-azure-sql-beginners-node-sql-serverless</guid>
            <pubDate>Tue, 29 Sep 2020 05:40:23 GMT</pubDate>
            <content:encoded><![CDATA[TodoMVC is a very well known (like ~27K GitHub stars known) application among developers as it is a really great way to start to learn a new Model-View-Something framework. It has plenty of samples done with different frameworks, all implementing exactly the same solution. This way is very easy to compare them against each other and see what is the one you prefer. Creating a To-Do App is easy enough, but not too easy, to be the perfect playground to learn a new technology.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Optimizing Your Website with Fiddler and Lighthouse]]></title>
            <link>https://www.dotnetweekly.com/articles/optimizing-your-website-with-fiddler-and-lighthouse</link>
            <guid>https://www.dotnetweekly.com/articles/optimizing-your-website-with-fiddler-and-lighthouse</guid>
            <pubDate>Tue, 29 Sep 2020 05:39:46 GMT</pubDate>
            <content:encoded><![CDATA[Fiddler Everywhere can be used to inspect and debug web traffic, but also to help you optimize your website performance on conjunction with the Chrome DevTools and Lighthouse.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Retrieve my ASP .NET Core WebAPI demo app fully migrated to ASP .NET Core 5 !]]></title>
            <link>https://www.dotnetweekly.com/articles/retrieve-my-asp-net-core-webapi-demo-app-fully-migrated-to-asp-net-core-5</link>
            <guid>https://www.dotnetweekly.com/articles/retrieve-my-asp-net-core-webapi-demo-app-fully-migrated-to-asp-net-core-5</guid>
            <pubDate>Tue, 29 Sep 2020 01:24:36 GMT</pubDate>
            <content:encoded><![CDATA[Retrieve my ASP .NET Core WebAPI demo app fully migrated to ASP .NET Core 5 !
Retrieve the following must have features:
Authentication, validation, caching, error handling, logging, documentation with Swagger, and many more !]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ASP.NET Core 5 Route to Code: Taking advantage of Microsoft.AspNetCore.Http json extensions]]></title>
            <link>https://www.dotnetweekly.com/articles/aspnet-core-5-route-to-code-taking-advantage-of-microsoftaspnetcorehttp-json-extensions</link>
            <guid>https://www.dotnetweekly.com/articles/aspnet-core-5-route-to-code-taking-advantage-of-microsoftaspnetcorehttp-json-extensions</guid>
            <pubDate>Tue, 29 Sep 2020 01:23:21 GMT</pubDate>
            <content:encoded><![CDATA[A while ago, I have introduced a cool feature of ASP.NET Core: how to build a lightweight API without using a framework. I named it like this: Nano service with ASP.NET Core: which you can find here: https://anthonygiretti.com/2020/06/29/nano-services-with-asp-net-core-or-how -to-build-a-light-api, I still like this feature and Microsoft called it: Route to Code, how could I not have thought about it before?
In this article I will tell you about an improvement made by ASP.NET Core 5: a simpler writing of Route to Code services thanks to JSON extensions for HttpRequest and HttpResponse based on System.Text.Json brought by ASP. NET Core 3 in 2019.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Razor Page CRUD in ASP.NET Core with jQuery AJAX – Ultimate Guide]]></title>
            <link>https://www.dotnetweekly.com/articles/razor-page-crud-in-aspnet-core-with-jquery-ajax-ultimate-guide</link>
            <guid>https://www.dotnetweekly.com/articles/razor-page-crud-in-aspnet-core-with-jquery-ajax-ultimate-guide</guid>
            <pubDate>Mon, 28 Sep 2020 18:54:53 GMT</pubDate>
            <content:encoded><![CDATA[Let's Build an ASP. NET Core Razor Page Web Application with CRUD Operations. This is not any simple CRUD Tutorial but coupled with quite a lot of other features too. Here is what you will be learning.

Setting up a Solution following Clean / Onion Architecture
Entity Framework Core
Repository Pattern with Unit Of Work
Razor Pages
Bootstrap Modal
JQuery AJAX Calls to render the Razor Partial Views with no Page Reloads whatsoever.
jQuery Datatables
Client Side Validation with jQuery Unobstructive Library
and so much more.

Basically what we will build is a CRUD Application with Rich User Experience and Blazing Fast Operations. Thanks to jQuery!]]></content:encoded>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week 16 Year 2020</title>
        <link>https://www.dotnetweekly.com/week/16/year/2020?feed=rss</link>
        <description></description>
        <lastBuildDate>Mon, 20 Apr 2020 03:13:12 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <category>Videos</category>
        <item>
            <title><![CDATA[Using Azure Monitor source map support to debug JavaScript errors]]></title>
            <link>https://www.dotnetweekly.com/articles/using-azure-monitor-source-map-support-to-debug-javascript-errors</link>
            <guid>https://www.dotnetweekly.com/articles/using-azure-monitor-source-map-support-to-debug-javascript-errors</guid>
            <pubDate>Fri, 17 Apr 2020 02:50:22 GMT</pubDate>
            <content:encoded><![CDATA[Azure Monitor’s new source map support expands a growing list of tools that empower developers to observe, diagnose, and debug their JavaScript applications.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Updates to Azure Maps Web SDK includes powerful new features]]></title>
            <link>https://www.dotnetweekly.com/articles/updates-to-azure-maps-web-sdk-includes-powerful-new-features</link>
            <guid>https://www.dotnetweekly.com/articles/updates-to-azure-maps-web-sdk-includes-powerful-new-features</guid>
            <pubDate>Fri, 17 Apr 2020 02:49:29 GMT</pubDate>
            <content:encoded><![CDATA[Today, we are announcing updates to the Azure Maps Web SDK, which adds support for common spatial file formats, introduces a new data driven template framework for popups, includes several OGC services, and much more.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Global Exception Handling in ASP.NET Core Web API]]></title>
            <link>https://www.dotnetweekly.com/articles/global-exception-handling-in-aspnet-core-web-api</link>
            <guid>https://www.dotnetweekly.com/articles/global-exception-handling-in-aspnet-core-web-api</guid>
            <pubDate>Fri, 17 Apr 2020 01:54:30 GMT</pubDate>
            <content:encoded><![CDATA[A good web API is consistent and follows established patterns for communicating error states to the client, leveraging the appropriate HTTP status codes. To that end, a global exception handler can be very helpful in consolidating a service’s error handling logic in one place and translating errors into the appropriate responses to send back to the client. In this post I’ll show you how you can plug custom exception-handling logic into the ASP.NET Core request pipeline to handle any exceptions that are thrown in your API.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Publish VSCode extension using GitHub Actions]]></title>
            <link>https://www.dotnetweekly.com/articles/publish-vscode-extension-using-github-actions</link>
            <guid>https://www.dotnetweekly.com/articles/publish-vscode-extension-using-github-actions</guid>
            <pubDate>Fri, 17 Apr 2020 01:53:27 GMT</pubDate>
            <content:encoded><![CDATA[GitHub Actions allow you to build complex workflows to automate your build and deployment processes. Built on top of Azure Pipelines, Actions allow you to maintain your workflows along with your code. In this post, we will see how we can implement CICD flow for a sample Visual Studio Code extension to deploy it to Visual Studio Marketplace.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Consuming GraphQL in C#]]></title>
            <link>https://www.dotnetweekly.com/articles/consuming-graphql-in-c</link>
            <guid>https://www.dotnetweekly.com/articles/consuming-graphql-in-c</guid>
            <pubDate>Fri, 17 Apr 2020 01:52:09 GMT</pubDate>
            <content:encoded><![CDATA[In this episode, Brandon show us how to consume a GraphQL endpoint from a C# client, specifically an iOS + Android written in C# using Xamarin.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub is now free for teams]]></title>
            <link>https://www.dotnetweekly.com/articles/github-is-now-free-for-teams</link>
            <guid>https://www.dotnetweekly.com/articles/github-is-now-free-for-teams</guid>
            <pubDate>Fri, 17 Apr 2020 01:51:26 GMT</pubDate>
            <content:encoded><![CDATA[We’re happy to announce we’re making private repositories with unlimited collaborators available to all GitHub accounts. All of the core GitHub features are now free for everyone. 

Until now, if your organization wanted to use GitHub for private development, you had to subscribe to one of our paid plans. But every developer on earth should have access to GitHub. Price shouldn’t be a barrier.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[When to Mock]]></title>
            <link>https://www.dotnetweekly.com/articles/when-to-mock</link>
            <guid>https://www.dotnetweekly.com/articles/when-to-mock</guid>
            <pubDate>Fri, 17 Apr 2020 01:50:37 GMT</pubDate>
            <content:encoded><![CDATA[The use of mocks in unit testing is a controversial topic (maybe less so now than several years ago). I remember how, throughout my programming career, I went from mocking almost every dependency, to the "no-mocks" policy, and then to "only mock external dependencies".

None of this practices are good enough. In this article, I’ll show you which dependencies to mock, and which to use as is in your tests.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Creating a CRUD API with Node, Express, and gRPC]]></title>
            <link>https://www.dotnetweekly.com/articles/creating-a-crud-api-with-node-express-and-grpc</link>
            <guid>https://www.dotnetweekly.com/articles/creating-a-crud-api-with-node-express-and-grpc</guid>
            <pubDate>Fri, 17 Apr 2020 01:43:32 GMT</pubDate>
            <content:encoded><![CDATA[Speed is becoming increasingly valuable in the web world.

Developers launching new releases of software, frameworks, and libraries have certainly invested a lot of time in decreasing numbers regarding loading time, request processing, and resource consumption.

HTTP/2, for example, was born through a myriad of optimizations that led the web to a more robust, faster, and lighter zone than we’ve ever been before.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Reporting API in ASP.NET Core - Network Error Logging]]></title>
            <link>https://www.dotnetweekly.com/articles/reporting-api-in-aspnet-core-network-error-logging</link>
            <guid>https://www.dotnetweekly.com/articles/reporting-api-in-aspnet-core-network-error-logging</guid>
            <pubDate>Wed, 15 Apr 2020 09:07:25 GMT</pubDate>
            <content:encoded><![CDATA[Reporting API aims at providing a framework for browsers to deliver reports about various issues to the servers. This post explores how Network Error Logging can be used with ASP.NET Core.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building GraphQL APIs with ASP.NET Core]]></title>
            <link>https://www.dotnetweekly.com/articles/building-graphql-apis-with-aspnet-core</link>
            <guid>https://www.dotnetweekly.com/articles/building-graphql-apis-with-aspnet-core</guid>
            <pubDate>Tue, 14 Apr 2020 09:49:29 GMT</pubDate>
            <content:encoded><![CDATA[In this article, we will see what’s GraphQL, what it solves, how to build a simple GraphQL back-end for our ASP.NET Core project and also how to consume this GraphQL. Before starting, notice that you can find the demonstrated project on Github. ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[File transfer app with Blazor]]></title>
            <link>https://www.dotnetweekly.com/articles/file-transfer-app-with-blazor</link>
            <guid>https://www.dotnetweekly.com/articles/file-transfer-app-with-blazor</guid>
            <pubDate>Mon, 13 Apr 2020 20:31:12 GMT</pubDate>
            <content:encoded><![CDATA[Learn how to build a file transfer web application with Blazor and AWS!]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub Protips: Tips, tricks, hacks, and secrets from Lee Reilly]]></title>
            <link>https://www.dotnetweekly.com/articles/github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly</link>
            <guid>https://www.dotnetweekly.com/articles/github-protips-tips-tricks-hacks-and-secrets-from-lee-reilly</guid>
            <pubDate>Mon, 13 Apr 2020 05:24:27 GMT</pubDate>
            <content:encoded><![CDATA[I’ve been using GitHub as an engineering, business development, and marketing manager for over 10 years now—quite the career trajectory! Along the way, I’ve picked up a few tricks to manage my notifications, quickly locate content and create pull requests, push markdown to its limits, and personalize my experience with some third party extensions. I’m sharing a few of my favorites, and hopefully there’s something new and helpful for you.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mobius – .NET runtime running on .NET Core]]></title>
            <link>https://www.dotnetweekly.com/articles/mobius-net-runtime-running-on-net-core</link>
            <guid>https://www.dotnetweekly.com/articles/mobius-net-runtime-running-on-net-core</guid>
            <pubDate>Mon, 13 Apr 2020 05:17:51 GMT</pubDate>
            <content:encoded><![CDATA[.NET application is “just” a piece of CIL bytecode to be executed by the .NET runtime. And .NET runtime is “just” a program that is able to perform this task. It happens that currently .NET Framework/.NET Core runtimes are written in C++. I am also fully aware of CoreRT that was .NET runtime with many parts rewritten to C# (like type system) but still, crucial parts (including JIT compiler and the GC) were left written in C++.]]></content:encoded>
        </item>
    </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Wed, 19 Aug 2020 06:24:38 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <category>Videos</category>
        <item>
            <title><![CDATA[Introducing C# 9: Native-sized integers]]></title>
            <link>https://www.dotnetweekly.com/articles/introducing-c-9-native-sized-integers</link>
            <guid>https://www.dotnetweekly.com/articles/introducing-c-9-native-sized-integers</guid>
            <pubDate>Wed, 19 Aug 2020 02:49:35 GMT</pubDate>
            <content:encoded><![CDATA[What are native-sized integers ? They are designed to be a integer whose size is specific to the platform. In other words, an instance of this type must be 32 bits on 32-bit and 64-bit hardware and operating systems on 64-bit hardware and operating systems.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Sidecar pattern + custom reverse proxy + k8s [Microservices .NET]]]></title>
            <link>https://www.dotnetweekly.com/articles/sidecar-pattern-custom-reverse-proxy-k8s-microservices-net</link>
            <guid>https://www.dotnetweekly.com/articles/sidecar-pattern-custom-reverse-proxy-k8s-microservices-net</guid>
            <pubDate>Tue, 18 Aug 2020 20:00:46 GMT</pubDate>
            <content:encoded><![CDATA[Seventh demo lesson of our new video course! We talk about the sidecar pattern which is the general idea behind the service mesh and how easily the basic reverse proxy can be implemented in .NET Core and deployed to Kubernetes.

"Microservices .NET" available at https://devmentors.io/courses/microservices-net

Pacco project available on GitHub: https://github.com/devmentors/Pacco

Nanoservice + Sidecar project: https://github.com/devmentors/Nanoser...]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[C# 9.0: Records]]></title>
            <link>https://www.dotnetweekly.com/articles/c-90-records</link>
            <guid>https://www.dotnetweekly.com/articles/c-90-records</guid>
            <pubDate>Tue, 18 Aug 2020 12:51:41 GMT</pubDate>
            <content:encoded><![CDATA[Immutability as always been challenging to implement properly in C#, or at least was very painful. C# 9.0 introduces the concept of records which will greatly simplify all of that.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to use Azure Durable Entities to see who’s the strongest Avenger]]></title>
            <link>https://www.dotnetweekly.com/articles/how-to-use-azure-durable-entities-to-see-whos-the-strongest-avenger</link>
            <guid>https://www.dotnetweekly.com/articles/how-to-use-azure-durable-entities-to-see-whos-the-strongest-avenger</guid>
            <pubDate>Mon, 17 Aug 2020 23:38:15 GMT</pubDate>
            <content:encoded><![CDATA[In the movies, Thor keeps saying that he “is the strongest Avenger”. Some people say that it’s actually Hulk, but I guess it’s a matter of perspective. How can we find a solution to this riddle? By using Azure Durable Entities of course!]]></content:encoded>
        </item>
    </channel>
</rss>
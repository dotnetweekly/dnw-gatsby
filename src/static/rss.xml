<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Fri, 10 Jul 2020 22:26:08 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[Introduction to network communication between Docker containers]]></title>
            <link>https://www.dotnetweekly.com/articles/introduction-to-network-communication-between-docker-containers</link>
            <guid>https://www.dotnetweekly.com/articles/introduction-to-network-communication-between-docker-containers</guid>
            <pubDate>Thu, 09 Jul 2020 21:17:17 GMT</pubDate>
            <content:encoded><![CDATA[Learn the basics of Docker virtual networks, how to diagnose connections issues, and how to fix them.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blazor GameDev – part 3: sprite rendering]]></title>
            <link>https://www.dotnetweekly.com/articles/blazor-gamedev-part-3-sprite-rendering</link>
            <guid>https://www.dotnetweekly.com/articles/blazor-gamedev-part-3-sprite-rendering</guid>
            <pubDate>Thu, 09 Jul 2020 21:11:37 GMT</pubDate>
            <content:encoded><![CDATA[Hi All! Welcome to part 3 of the Blazor 2d Gamedev series. Today we’re going to see how to render a sprite and handle the window resize event.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Extracting and Hashing Lazy-Loaded CSS in Angular]]></title>
            <link>https://www.dotnetweekly.com/articles/extracting-and-hashing-lazy-loaded-css-in-angular</link>
            <guid>https://www.dotnetweekly.com/articles/extracting-and-hashing-lazy-loaded-css-in-angular</guid>
            <pubDate>Thu, 09 Jul 2020 08:08:07 GMT</pubDate>
            <content:encoded><![CDATA[There is no doubt that we all want our applications to load very fast. To do this, we need to keep the initial bundle size small. Lazy loading is one of the methods we use in this case. We can lazy load some third-party JavaScript files and some CSS files. In this article, we will learn how to lazy load our CSS files and how to extract them with a hash on production build to prevent browser cache.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Add Razor runtime compilation when developing ASP .NET Core]]></title>
            <link>https://www.dotnetweekly.com/articles/add-razor-runtime-compilation-when-developing-asp-net-core</link>
            <guid>https://www.dotnetweekly.com/articles/add-razor-runtime-compilation-when-developing-asp-net-core</guid>
            <pubDate>Tue, 07 Jul 2020 06:08:08 GMT</pubDate>
            <content:encoded><![CDATA[Learn how to update Razor files with ASP.NET Core without having to compile and restart the project. This post will go through the multiple ways possible.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Easiest Way to Version NuGet Packages]]></title>
            <link>https://www.dotnetweekly.com/articles/the-easiest-way-to-version-nuget-packages</link>
            <guid>https://www.dotnetweekly.com/articles/the-easiest-way-to-version-nuget-packages</guid>
            <pubDate>Tue, 07 Jul 2020 02:18:00 GMT</pubDate>
            <content:encoded><![CDATA[he easiest way to version NuGet packages using semantic versioning in my opinion is to use MinVer. Getting started is literally as easy as adding the MinVer NuGet package. Getting finished is not too much more than that.

In this post I'll discuss the semantic versioning 2.0 standard and show you how you can semantically version your NuGet packages and the DLL's within them MinVer and Git tags.

What is Semantic Versioning?
Semantic versioning is the idea that each part of a version number has some intrinsic meaning. Lets break down an example of a full version number into it's constituent parts:

1.2.3-preview.0.4+b34215d3d2539837ac3e20fc3111ba7d46670064
1 - The major version number. Incrementing this means that a major breaking change has occurred.
2 - The minor version number. Incrementing this means that a non-breaking change has occurred.
3 - The patch version number. Incrementing this means that a patch or fix has been issued for a bug.
preview (Optional) - This determines that the build is a pre-release build. This pre-release label is often set to alpha or beta.
0 (Optional) - This is the pre-release version number.
4 (Optional) - The Git height or the number of commits since the last non-pre-release build.
b34215d3d2539837ac3e20fc3111ba7d46670064 (Optional) - The Git SHA or hash of the current commit.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building and consuming GraphQL API in ASP.NET Core 3.1]]></title>
            <link>https://www.dotnetweekly.com/articles/building-and-consuming-graphql-api-in-aspnet-core-31</link>
            <guid>https://www.dotnetweekly.com/articles/building-and-consuming-graphql-api-in-aspnet-core-31</guid>
            <pubDate>Tue, 07 Jul 2020 02:17:15 GMT</pubDate>
            <content:encoded><![CDATA[GraphQL is an open source query language, originally developed by FaceBook. In this article, Joydip Kanjilal explains more about GraphQL and walks through a sample app.

It was in the year 2012 that Facebook decided to rebuild their apps to improve performance and efficiency. It was a time when Facebook’s mobile strategy wasn’t working because of high network usage. Optimization strategies using caching might have improved the performance, but since the app was too complex, it was thought that the data fetching strategy itself should be changed. Here’s where GraphQL came in, and today it has become extremely popular among the development community worldwide. GraphQL, developed by Facebook in 2012 and open-sourced 2015, is now maintained by the GraphQL Foundation.

GraphQL is a platform-agnostic, language-neutral query language that has been around for quite some time now and can be used to execute queries and fetch data. Similar to REST, GraphQL is a specification that provides an elegant and flexible way to query your data. This article discusses the features and benefits of GraphQL and then illustrates how one can work with GraphQL in ASP.NET Core 3.1.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Getting Started with GitFlow]]></title>
            <link>https://www.dotnetweekly.com/articles/getting-started-with-gitflow</link>
            <guid>https://www.dotnetweekly.com/articles/getting-started-with-gitflow</guid>
            <pubDate>Tue, 07 Jul 2020 02:16:45 GMT</pubDate>
            <content:encoded><![CDATA[In this article, Diogo Souza explains GitFlow, a branching model for Git. He demonstrates how to work with GitFlow to create and deploy a feature and a hotfix to GitHub.

Chances are that you already work with Git as your default versioning system, and it’s even more likely if you’re an experienced developer. The importance of this technology to the global software community is undeniable, regardless of what programming language you use, your preferences and your experience. Massive open source communities like the ones inhabiting GitHub are possible today thanks to Git.

However, even with all the power Git brings up to enable parallel contributions among dozens (sometimes hundreds) of users over the same repositories, it’s still hard to embrace all the different team behavioral compositions out there.

Models and standards were born trying to address these situations. As there are so many distinct forms and conditions, there’s no silver bullet to solve all realities at once. You’ll have to analyze your project/team context and, together, decide what’s best.

This article takes a closer look at the GitFlow workflow. It demonstrates how to create a new GitHub repository and play around with the workflow so you can check it out in practice.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[A Distributed Tracing Adventure in Apache Beam]]></title>
            <link>https://www.dotnetweekly.com/articles/a-distributed-tracing-adventure-in-apache-beam</link>
            <guid>https://www.dotnetweekly.com/articles/a-distributed-tracing-adventure-in-apache-beam</guid>
            <pubDate>Tue, 07 Jul 2020 02:13:55 GMT</pubDate>
            <content:encoded><![CDATA[Distributed systems are hard, and things can often get much more difficult when problems arise. This is only exacerbated by the fact that many of these systems can be notoriously difficult to dig into when they are actually out in the wild and not just running "on your machine".

They say that a picture is worth a thousand words, but in the world of distributed systems, a picture can easily be worth a thousand hours. While I can't promise you that this post will in any way save you a thousand hours, I hope that you find value in the thought process that I explored when introducing tracing and visibility into an Apache Beam pipeline.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[12 Visual Studio Debugging Productivity Tips]]></title>
            <link>https://www.dotnetweekly.com/articles/12-visual-studio-debugging-productivity-tips</link>
            <guid>https://www.dotnetweekly.com/articles/12-visual-studio-debugging-productivity-tips</guid>
            <pubDate>Tue, 07 Jul 2020 02:13:18 GMT</pubDate>
            <content:encoded><![CDATA[12 Visual Studio Debugging Productivity Tips
In this post we assume the the reader knows the basics of debugging with Visual Studio:

F5 to start running with the debugger
F9 set breakpoint on the current line
F10 run till next breakpoint
F5 to resume the execution from a stopped program debugged
F11 step into the function (if the instruction pointer points to a function)
F10 step over the function (if the instruction pointer points to a function)
Shift+F11 step out the executed function
Pause execution
Attach to Process
Quick watch an element in source code with mouse hover
Debug Windows : Locals, Watch, Immediate, Modules, Stack Trace, Exception]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Micro-services communication: Rabbitmq and Asp.net core]]></title>
            <link>https://www.dotnetweekly.com/articles/micro-services-communication-rabbitmq-and-aspnet-core</link>
            <guid>https://www.dotnetweekly.com/articles/micro-services-communication-rabbitmq-and-aspnet-core</guid>
            <pubDate>Tue, 07 Jul 2020 02:12:46 GMT</pubDate>
            <content:encoded><![CDATA[When building micro-services it is very important to take into consideration which messaging mechanism you use. There are several ways in which micro-services communicate using different messaging protocols. Today we will focus on the AMQP messaging protocol with rabbitmq and asp.net core.

What is Rabbitmq ?
Rabbitmq is a messaging system that permits your applications communicate together using messages and queues. Rabbitmq uses the AMQP (Advanced Message Queuing Protocol) messaging protocol. It is opensource and is very robust. Rabbitmq is written in Erlang, a functional programming language created for telecommunication systems by Ericsson. Erlang is a concurrent programming language with several other features which permit it to be an ideal choice for building highly robust and resilient messaging systems.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ASP.NET Core Social authentication without Identity]]></title>
            <link>https://www.dotnetweekly.com/articles/aspnet-core-social-authentication-without-identity</link>
            <guid>https://www.dotnetweekly.com/articles/aspnet-core-social-authentication-without-identity</guid>
            <pubDate>Tue, 07 Jul 2020 02:12:05 GMT</pubDate>
            <content:encoded><![CDATA[This blog post is about how to configure and use ASP.NET Core Social Authentication without ASP.NET Core identity. In this post I am using Google Authentication provider, you can use Facebook or Twitter. Only the authentication provider and associated configuration only will change.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Announcing Pylance: Fast, feature-rich language support for Python in Visual Studio Code]]></title>
            <link>https://www.dotnetweekly.com/articles/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code</link>
            <guid>https://www.dotnetweekly.com/articles/announcing-pylance-fast-feature-rich-language-support-for-python-in-visual-studio-code</guid>
            <pubDate>Tue, 07 Jul 2020 02:11:43 GMT</pubDate>
            <content:encoded><![CDATA[We are excited to announce Pylance, our fast and feature-rich language support for Python! Pylance is available today in the Visual Studio Code marketplace.

Pylance depends on our core Python extension and builds upon that experience, for those of you who have already installed it.

Optimized performance
Pylance is a new language server for Python, which uses the Language Server Protocol to communicate with VS Code.

The name Pylance serves as a nod to Monty Python’s Lancelot, who is the first knight to answer the bridgekeeper’s questions in the Holy Grail.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Launching docs.github.com]]></title>
            <link>https://www.dotnetweekly.com/articles/launching-docsgithubcom</link>
            <guid>https://www.dotnetweekly.com/articles/launching-docsgithubcom</guid>
            <pubDate>Tue, 07 Jul 2020 02:10:52 GMT</pubDate>
            <content:encoded><![CDATA[We know how important learning is to your success using GitHub. When you’re using our products, we hope you’ll feel confident and supported with the tools you need to keep growing in your journey. That’s why we’re launching a single home for all of GitHub’s product documentation, docs.github.com.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blazor GameDev - part 2: canvas initialization]]></title>
            <link>https://www.dotnetweekly.com/articles/blazor-gamedev-part-2-canvas-initialization</link>
            <guid>https://www.dotnetweekly.com/articles/blazor-gamedev-part-2-canvas-initialization</guid>
            <pubDate>Mon, 06 Jul 2020 18:00:22 GMT</pubDate>
            <content:encoded><![CDATA[Hi All! Welcome to part 2 of the Blazor 2d Gamedev series. Today we're going to see how to initialize the canvas and start rendering something.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Exposing proto files in a gRPC service over a frameworkless and lightweight API]]></title>
            <link>https://www.dotnetweekly.com/articles/exposing-proto-files-in-a-grpc-service-over-a-frameworkless-and-lightweight-api</link>
            <guid>https://www.dotnetweekly.com/articles/exposing-proto-files-in-a-grpc-service-over-a-frameworkless-and-lightweight-api</guid>
            <pubDate>Mon, 06 Jul 2020 00:26:14 GMT</pubDate>
            <content:encoded><![CDATA[A few days ago I introduced the notion of nano service in ASP.NET Core or rather how to implement a REST API without any particular framework (https://anthonygiretti.com/2020/06/29/nano-services-with-asp-net-core-or-how-to-build-a-light-api/). Since then, I have challenged myself regularly on the possibilities of relevant applications of this idea. Well, I found a very interesting use case: exposing the protobuffs of a gRPC service without using a framework and having to manage collisions with the gRPC framework of ASP.NET Core. This article will show you how to do it in the simplest way possible.]]></content:encoded>
        </item>
    </channel>
</rss>
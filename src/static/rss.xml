<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Wed, 22 Jul 2020 19:27:29 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <category>Videos</category>
        <category>Libraries-Tools</category>
        <item>
            <title><![CDATA[Thread Safety & Scoped Lifetime in Dependency Injection Containers]]></title>
            <link>https://www.dotnetweekly.com/articles/thread-safety-and-scoped-lifetime-in-dependency-injection-containers</link>
            <guid>https://www.dotnetweekly.com/articles/thread-safety-and-scoped-lifetime-in-dependency-injection-containers</guid>
            <pubDate>Wed, 22 Jul 2020 19:23:19 GMT</pubDate>
            <content:encoded><![CDATA[If you’re using Scoped Lifetime in a Dependency Injection containers, beware! You may be run into race conditions due to a lack of thread safety.

I was doing a live stream on Domain Events over on my YouTube Channel where I was taking advantage of Scoped Lifetime. After the stream, I realized Scoped Lifetime and thread safety isn’t mentioned much and I’m not sure why? It could be because developers aren’t using multiple threads within the top-level request (HTTP request or service bus message invocation). Or it’s because developers are writing thread-safe code by default. I tend to think it’s the former.

Either way, I figured it would be worthwhile providing an example of using Scoped Lifetime and how you can run into issues if you aren’t writing thread-safe code.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Asynchronous messaging with Azure Service Bus]]></title>
            <link>https://www.dotnetweekly.com/articles/asynchronous-messaging-with-azure-service-bus</link>
            <guid>https://www.dotnetweekly.com/articles/asynchronous-messaging-with-azure-service-bus</guid>
            <pubDate>Wed, 22 Jul 2020 19:21:08 GMT</pubDate>
            <content:encoded><![CDATA[The Microservices architecture style becomes more and more popular. There are many crucial parts of the solution that have to be taken into consideration and one of them is communication. How to communicate asynchronously between microservices to make sure that they are not tightly-coupled? In this article, I would like to present and discuss how to use the Azure Service Bus to implement asynchronous communication between microservices.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Register Now: Azure SQL Bootcamp]]></title>
            <link>https://www.dotnetweekly.com/articles/register-now-azure-sql-bootcamp</link>
            <guid>https://www.dotnetweekly.com/articles/register-now-azure-sql-bootcamp</guid>
            <pubDate>Wed, 22 Jul 2020 19:20:48 GMT</pubDate>
            <content:encoded><![CDATA[Along with launching new content in August, we're also hosting a LIVE bootcamp over the course of four days where you can learn Azure SQL from Anna Hoffman and Bob Ward and get your questions answered. Each day, there will be a two-hour live session for you to join. After or during the session, there will also be hands-on labs to complete. By the end of the week, you should be comfortable with the Azure SQL fundamentals (or the "meat and potatoes" of Azure SQL).
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Microservices with ASP.NET Core 3.1]]></title>
            <link>https://www.dotnetweekly.com/articles/microservices-with-aspnet-core-31</link>
            <guid>https://www.dotnetweekly.com/articles/microservices-with-aspnet-core-31</guid>
            <pubDate>Wed, 22 Jul 2020 19:20:19 GMT</pubDate>
            <content:encoded><![CDATA[Microservices is a type of Architecture in which application is created as multiple small independent serviceable components. This article will cover in detail how to create microservices with ASP.NET Core, Serilog, Swagger UI, Health Checks & Docker containers.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Get Started with Terraform on Azure]]></title>
            <link>https://www.dotnetweekly.com/articles/get-started-with-terraform-on-azure</link>
            <guid>https://www.dotnetweekly.com/articles/get-started-with-terraform-on-azure</guid>
            <pubDate>Wed, 22 Jul 2020 19:19:05 GMT</pubDate>
            <content:encoded><![CDATA[One of the technologies that has come around through the DevOps movement of increased communication and cooperation between the Development and Operations teams has been Infrastructure as Code (IaC). These are technologies that DevOps Engineers and Site Reliability Engineers (SREs) have been adopting to build the latest technique of infrastructure automation in the cloud. Microsoft Azure natively supports ARM Templates for implementing IaC, but that’s an Azure specific technology.

With the help of HashiCorp Terraform, we now have an open source, Infrastructure as Code tool that is cloud agnostic, providing an infrastructure automation tool that works with any cloud provider, including Microsoft Azure, and can simultaneously work across multiple cloud providers in a single infrastructure deployment.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blazor Vs. Traditional Web Apps]]></title>
            <link>https://www.dotnetweekly.com/articles/blazor-vs-traditional-web-apps</link>
            <guid>https://www.dotnetweekly.com/articles/blazor-vs-traditional-web-apps</guid>
            <pubDate>Wed, 22 Jul 2020 19:18:18 GMT</pubDate>
            <content:encoded><![CDATA[Blazor is a new Single Page Application (SPA) technology by Microsoft. It is a comparable technology to React, Angular, and Vue.js but uses C# instead of JavaScript. It brings C# to the world of SPAs and challenges traditional web apps frameworks such as ASP .NET Web Forms and ASP .NET Core MVC for building web apps. This article discusses the choice between SPAs and traditional web apps and explains the difference between server-side and client-side rendering. 

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zero to Hero with App Service, Part 4: Migrate Applications to Azure App Service]]></title>
            <link>https://www.dotnetweekly.com/articles/zero-to-hero-with-app-service-part-4-migrate-applications-to-azure-app-service</link>
            <guid>https://www.dotnetweekly.com/articles/zero-to-hero-with-app-service-part-4-migrate-applications-to-azure-app-service</guid>
            <pubDate>Wed, 22 Jul 2020 19:16:37 GMT</pubDate>
            <content:encoded><![CDATA[In this installment of Zero to Hero with App Service, learn how to migrate your existing applications to App Service. If you followed parts one, two, and three then you already have an application on App Service, and you can continue to the next article.

 

Overview
 

There are multiple ways to migrate a web application to Azure App Service:

Redeploy code using CI/CD Pipelines, Web Deploy, or the REST APIs
Containerize your web application and deploy from a container registry
Use App Service Migration Assessment Tool to migrate your ASP.NET, PHP web applications and Linux containers
App Service Migration Assessment Tool assesses whether your web site can be moved to Azure App Service. If your web site is public, you can simply provide your URL on this website to run the assessment. You can also download and run the assistant if your web site is hosted in a private environment. Post assessment App service Migration Assessment tool allows quick and easy migration of ASP.Net & PHP web applications running on IIS, and containerized web applications running on Linux operating systems to Azure App Service.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Using Key Vault and Managed Identities with Azure Functions]]></title>
            <link>https://www.dotnetweekly.com/articles/using-key-vault-and-managed-identities-with-azure-functions</link>
            <guid>https://www.dotnetweekly.com/articles/using-key-vault-and-managed-identities-with-azure-functions</guid>
            <pubDate>Wed, 22 Jul 2020 19:16:15 GMT</pubDate>
            <content:encoded><![CDATA[This article shows how Azure Key Vault could be used together with Azure Functions. The Azure Functions can use the system assigned identity to access the Key Vault. This needs to be configured in the Key Vault access policies using the service principal. By using the Microsoft.Azure.KeyVault and the Microsoft.Extensions.Configuration.AzureKeyVault nuget packages, defining direct references in the Azure Functions configuration is not required. The secrets can be read directly from the Key Vault. This also has the advantage of referencing only the secret and not the direct version of the secret. The latest version of the secret is used (depending on the cache)

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[.NET on AWS: Introducing Docker ECS Integration]]></title>
            <link>https://www.dotnetweekly.com/articles/net-on-aws-introducing-docker-ecs-integration</link>
            <guid>https://www.dotnetweekly.com/articles/net-on-aws-introducing-docker-ecs-integration</guid>
            <pubDate>Wed, 22 Jul 2020 19:15:41 GMT</pubDate>
            <content:encoded><![CDATA[Last week I read about a new Docker ECS Integration experience, and it piqued my interest. I immediately put it onto my list of things to try out and experiment with. After spending an hour or so with the tooling over the weekend, my early impression is that this CLI feature might be quite useful. In this post, I will briefly explain what the integration looks like today and how to get started with it.

Another useful resource is to watch a recording from the recent AWS Cloud Container Conference @ 2hr 18 mins. This includes a session and demo about the integration by Chad Metcalf, from Docker and Carmen Puccio, from AWS.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Getting Started with Microsoft Graph API]]></title>
            <link>https://www.dotnetweekly.com/articles/getting-started-with-microsoft-graph-api</link>
            <guid>https://www.dotnetweekly.com/articles/getting-started-with-microsoft-graph-api</guid>
            <pubDate>Wed, 22 Jul 2020 19:13:03 GMT</pubDate>
            <content:encoded><![CDATA[It is a common practice for big players in the cloud market to allow their users to have more than one method to access their data. With Google, for example, you can have one single account and easy access to a bunch of free services like Gmail and Drive.

Google also provides public APIs for developers to be able to access data via other applications. The whole process happens through the usual OAuth +, an application provided by the player.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GraphQL on Azure: Part 2 - dotnet and App Service]]></title>
            <link>https://www.dotnetweekly.com/articles/graphql-on-azure-part-2-dotnet-and-app-service</link>
            <guid>https://www.dotnetweekly.com/articles/graphql-on-azure-part-2-dotnet-and-app-service</guid>
            <pubDate>Wed, 22 Jul 2020 19:12:39 GMT</pubDate>
            <content:encoded><![CDATA[In my introductory post we saw that there are many different ways in which you can host a GraphQL service on Azure and today we’ll take a deeper look at one such option, Azure App Service, by building a GraphQL server using dotnet. If you’re only interested in the Azure deployment, you can jump forward to that section. Also, you’ll find the complete sample on my GitHub.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Look Behind the IQueryable Curtain]]></title>
            <link>https://www.dotnetweekly.com/articles/look-behind-the-iqueryable-curtain</link>
            <guid>https://www.dotnetweekly.com/articles/look-behind-the-iqueryable-curtain</guid>
            <pubDate>Wed, 22 Jul 2020 19:12:03 GMT</pubDate>
            <content:encoded><![CDATA[In a previous blog post, I explored the power of expressions and used them to dynamically build a rules engine based on a JSON payload. In this post I flip everything upside down and start with the expression. Given the variety of possible expression types and complexity of expression trees, what is the best way to decompose the tree? And, while we’re at it, can we mutate the expression to make it behave differently? I’ll explain why that’s important.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The code smell every project suffers from]]></title>
            <link>https://www.dotnetweekly.com/articles/the-code-smell-every-project-suffers-from</link>
            <guid>https://www.dotnetweekly.com/articles/the-code-smell-every-project-suffers-from</guid>
            <pubDate>Tue, 21 Jul 2020 18:16:15 GMT</pubDate>
            <content:encoded><![CDATA[When reviewing pull requests, the code smell I always encounter is the Primitive obsession. For those of you who don't know, it's a design smell where the code relies too much on using primitive types like bool, int, string, guid, etc. As you'll discover in this blog post, this approach leads to bugs and issues that can hurt your project pretty severely.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Not always IDE tip and modern functions work very well – await using EntityFramework story.]]></title>
            <link>https://www.dotnetweekly.com/articles/not-always-ide-tip-and-modern-functions-work-very-well-await-using-entityframework-story</link>
            <guid>https://www.dotnetweekly.com/articles/not-always-ide-tip-and-modern-functions-work-very-well-await-using-entityframework-story</guid>
            <pubDate>Mon, 20 Jul 2020 20:08:12 GMT</pubDate>
            <content:encoded><![CDATA[As You maybe know from C# 8, every class with implement interface IAsyncDisposable can be disposed of with clause await using. It’s looks pretty, modern, even very good IDE like Rider show tips Use await using what harm could there be? The answer is everything.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[AdminLTE Starter Kit for ASP.NET Core – Open Source]]></title>
            <link>https://www.dotnetweekly.com/articles/adminlte-starter-kit-for-aspnet-core-open-source</link>
            <guid>https://www.dotnetweekly.com/articles/adminlte-starter-kit-for-aspnet-core-open-source</guid>
            <pubDate>Mon, 20 Jul 2020 13:29:29 GMT</pubDate>
            <content:encoded><![CDATA[Save Tons of Hours in Development by using this Starter Kit / Boilerplate Template for ASP.NET Core.
Currently available features -
1. Integrated with AdminLTE Dashboard UI
2. Extended User and Role Management
3. Default Users and Roles Seeding
4. Super-Admins can Add New Roles and Assign Users to Roles.
5. Email Verification Required to log in. Can Bypass this using a setting flag in appsettings.json
6. Send Mails to Contacts
7. Responsive UI
8. and much more
This is an Open Source Project and will keep growing on a constant basis. Read more about this project here.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Improving HTTP resilience in Blazor webassembly]]></title>
            <link>https://www.dotnetweekly.com/articles/improving-http-resilience-in-blazor-webassembly</link>
            <guid>https://www.dotnetweekly.com/articles/improving-http-resilience-in-blazor-webassembly</guid>
            <pubDate>Mon, 20 Jul 2020 01:50:00 GMT</pubDate>
            <content:encoded><![CDATA[Hi All! Today I decided to take a quick break from my Blazor gamedev series and talk about resilience. We’ll see how to call a REST API from a Blazor webassembly app using an HTTP Client and how to handle errors using Polly.]]></content:encoded>
        </item>
    </channel>
</rss>
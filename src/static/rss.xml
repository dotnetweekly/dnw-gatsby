<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Wed, 17 Jul 2019 11:05:28 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[How to model hierarchical data in noSQL databases]]></title>
            <link>https://www.dotnetweekly.com/articles/how-to-model-hierarchical-data-in-nosql-databases</link>
            <guid>https://www.dotnetweekly.com/articles/how-to-model-hierarchical-data-in-nosql-databases</guid>
            <pubDate>Wed, 17 Jul 2019 10:50:58 GMT</pubDate>
            <content:encoded><![CDATA[Querying hierarchical data is always where the big boys of SQL shined. And I really mean the big boys part since only Oracle, and Microsoft SQL Server have support for CTE [As Thomas Levesque pointed out in the comments, not only those have support for CTE. Full list on wikipedia] (Common Table Expressions) that allow for executing one SQL statement what will fetch a subtree. There are data modeling approaches that allow for doing hierarchical data reads with noSQL databases and databases without support for CTE.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NoSQL vs SQL: Demystifying NoSQL Databases]]></title>
            <link>https://www.dotnetweekly.com/articles/nosql-vs-sql-demystifying-nosql-databases</link>
            <guid>https://www.dotnetweekly.com/articles/nosql-vs-sql-demystifying-nosql-databases</guid>
            <pubDate>Wed, 17 Jul 2019 10:49:41 GMT</pubDate>
            <content:encoded><![CDATA[There’s a lot of talk about NoSQL being the database of the future. Let’s take a look at NoSQL vs SQL databases, and what the differences are, use cases, and why you would use one over the other. Relational SQL databases have been the default database type for many years, but NoSQL offers a few additional options that fit well in many use cases. This article will dive into the specifics of what NoSQL databases offer, and what the differences are between NoSQL and SQL databases. Let’s dig in and demystify the NoSQL vs SQL database debate!

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ASP.NET Core gRPC Services]]></title>
            <link>https://www.dotnetweekly.com/articles/aspnet-core-grpc-services</link>
            <guid>https://www.dotnetweekly.com/articles/aspnet-core-grpc-services</guid>
            <pubDate>Wed, 17 Jul 2019 10:46:06 GMT</pubDate>
            <content:encoded><![CDATA[Originally developed at Google, gRPC today is a remote procedure call (RPC) framework that has emerged as an alternative to RESTful and HTTP-based interfaces to connect remote components and specifically microservices. The new RPC framework was created in part to work with modern technologies such as HTTP/2 and Protobuf.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fighting complexity in software development]]></title>
            <link>https://www.dotnetweekly.com/articles/fighting-complexity-in-software-development</link>
            <guid>https://www.dotnetweekly.com/articles/fighting-complexity-in-software-development</guid>
            <pubDate>Wed, 17 Jul 2019 10:45:10 GMT</pubDate>
            <content:encoded><![CDATA[After working on different projects, I've noticed that every one of them had some common problems, regardless of domain, architecture, code convention and so on. Those problems weren't challenging, just a tedious routine: making sure you didn't miss anything stupid and obvious. Instead of doing this routine on a daily basis I became obsessed with seeking solution: some development approach or code convention or whatever that will help me to design a project in a way that will prevent those problems from happening, so I can focus on interesting stuff. That's the goal of this article: to describe those problems and show you that mix of tools and approaches that I found to solve them.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ASP.NET Core: Fresh Framework to Cover All Your Web Application Needs]]></title>
            <link>https://www.dotnetweekly.com/articles/aspnet-core-fresh-framework-to-cover-all-your-web-application-needs</link>
            <guid>https://www.dotnetweekly.com/articles/aspnet-core-fresh-framework-to-cover-all-your-web-application-needs</guid>
            <pubDate>Wed, 17 Jul 2019 10:44:08 GMT</pubDate>
            <content:encoded><![CDATA[In continuation of the article where we discussed what is more appropriate for Docker containers: .NET Core or .NET Framework, let’s take a closer look at ASP.NET Core.
.NET Core and ASP.NET Core are two independent technologies. They are alike and different like the .NET Framework and ASP.NET. In this article, we will review the history, advantages, and disadvantages of both ASP.NET Core and .NET Core. On top of that, we will provide a review of some changes that occurred to the ASP.NET Core project architecture.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The best Twitch and YouTube channels for .NET developers]]></title>
            <link>https://www.dotnetweekly.com/articles/the-best-twitch-and-youtube-channels-for-net-developers</link>
            <guid>https://www.dotnetweekly.com/articles/the-best-twitch-and-youtube-channels-for-net-developers</guid>
            <pubDate>Tue, 16 Jul 2019 06:31:19 GMT</pubDate>
            <content:encoded><![CDATA[A great way to learn the newest technology available in .NET is through live coding sessions. You can find a lot of streams on both Twitch and YouTube.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[.NET Unit Testing: Spend Upfront to Save Later On]]></title>
            <link>https://www.dotnetweekly.com/articles/https-wwwtoptalcom-dot-net-dotnet-unit-testing-tutorial</link>
            <guid>https://www.dotnetweekly.com/articles/https-wwwtoptalcom-dot-net-dotnet-unit-testing-tutorial</guid>
            <pubDate>Mon, 15 Jul 2019 05:33:16 GMT</pubDate>
            <content:encoded><![CDATA[Unit testing sometimes sounds like an unnecessary expense, but it is a powerful, yet simple tool. Unit tests allow you to identify and rectify weaknesses with relatively little effort. In this article, Toptal Software Engineer Nickolas Fisher takes you on a quick tour of unit testing and explains why you can’t have too many unit tests.]]></content:encoded>
        </item>
    </channel>
</rss>
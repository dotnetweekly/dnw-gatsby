<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Fri, 31 May 2019 06:19:43 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <item>
            <title><![CDATA[Serverless GraphQL with Azure Functions, GraphQL for .NET, and Cosmos DB]]></title>
            <link>https://www.dotnetweekly.com/articles/serverless-graphql-with-azure-functions-graphql-for-net-and-cosmos-db</link>
            <guid>https://www.dotnetweekly.com/articles/serverless-graphql-with-azure-functions-graphql-for-net-and-cosmos-db</guid>
            <pubDate>Wed, 29 May 2019 20:37:48 GMT</pubDate>
            <content:encoded><![CDATA[This post shows how to build serverless GraphQL service by using Azure Functions and GraphQL for .NET.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Debugging System.AggregateException - even in async code]]></title>
            <link>https://www.dotnetweekly.com/articles/debugging-systemaggregateexception-even-in-async-code</link>
            <guid>https://www.dotnetweekly.com/articles/debugging-systemaggregateexception-even-in-async-code</guid>
            <pubDate>Tue, 28 May 2019 06:08:59 GMT</pubDate>
            <content:encoded><![CDATA[Learn everything about how to debug async errors in C# like: Exception thrown System.AggregateException in mscorlib.dll - a task was canceled.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top Open Source Asp.Net Core Content Management System (CMS)]]></title>
            <link>https://www.dotnetweekly.com/articles/top-open-source-aspnet-core-content-management-system-cms</link>
            <guid>https://www.dotnetweekly.com/articles/top-open-source-aspnet-core-content-management-system-cms</guid>
            <pubDate>Mon, 27 May 2019 08:56:11 GMT</pubDate>
            <content:encoded><![CDATA[After searching & testing, In this Article, I have listed down some of the Top Open Source Content Management Systems (CMS) for ASP.NET Core.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Blockchain: Let’s think this through again]]></title>
            <link>https://www.dotnetweekly.com/articles/blockchain-lets-think-this-through-again</link>
            <guid>https://www.dotnetweekly.com/articles/blockchain-lets-think-this-through-again</guid>
            <pubDate>Mon, 27 May 2019 03:25:29 GMT</pubDate>
            <content:encoded><![CDATA[Since bitcoin came to public attention in 2009, there have been a plethora of publications extolling the significant commercial implications of both Bitcoin and Bitcoin’s underpinning technology: the Blockchain. There was a second wave of excitement generated by the “smart contract” (though I struggle to see how this differs from conditional execution of a workflow). The sheer list of “A-list” publisher have spurred some firms to invest non-trivial amounts in blockchain related use cases.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building Blazor shared pager component]]></title>
            <link>https://www.dotnetweekly.com/articles/building-blazor-shared-pager-component</link>
            <guid>https://www.dotnetweekly.com/articles/building-blazor-shared-pager-component</guid>
            <pubDate>Mon, 27 May 2019 03:25:10 GMT</pubDate>
            <content:encoded><![CDATA[I have already implemented and then blogged about Blazor pager component and shared Blazor components. This post gathers my previous works and demonstrates how to build Blazor shared pager component we can use in multiple projects.


Let’s start with shared Blazor component I introduced in my blog post Building Blazor shared components. For the end of this blog post I had clean out-of-box shared component with dummy content and no code.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Using WebAssembly with React]]></title>
            <link>https://www.dotnetweekly.com/articles/using-webassembly-with-react</link>
            <guid>https://www.dotnetweekly.com/articles/using-webassembly-with-react</guid>
            <pubDate>Mon, 27 May 2019 03:24:46 GMT</pubDate>
            <content:encoded><![CDATA[WebAssembly is one of the newest technologies to hit the web dev world with some promising new features around performance. This is a look into how we could slowly integrate the new technology into an existing React app.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dependabot has been acquired by GitHub and we couldn't be more excited!]]></title>
            <link>https://www.dotnetweekly.com/articles/dependabot-has-been-acquired-by-github-and-we-couldnt-be-more-excited</link>
            <guid>https://www.dotnetweekly.com/articles/dependabot-has-been-acquired-by-github-and-we-couldnt-be-more-excited</guid>
            <pubDate>Mon, 27 May 2019 03:23:00 GMT</pubDate>
            <content:encoded><![CDATA[Here's what you need to know:

We're integrating Dependabot directly into GitHub, starting with security fix PRs
You can still install Dependabot from the GitHub Marketplace whilst we integrate it into GitHub, but it's now free of charge
We've doubled the size of Dependabot's team; expect lots of great improvements over the coming months]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Dockerizing a Vue App]]></title>
            <link>https://www.dotnetweekly.com/articles/dockerizing-a-vue-app</link>
            <guid>https://www.dotnetweekly.com/articles/dockerizing-a-vue-app</guid>
            <pubDate>Mon, 27 May 2019 03:22:29 GMT</pubDate>
            <content:encoded><![CDATA[This tutorial looks at how to Dockerize a Vue app, built with the Vue CLI, using Docker along with Docker Compose and Docker Machine for both development and production. We’ll specifically focus on-

Setting up a development environment with code hot-reloading
Configuring a production-ready image using multistage builds]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Moving from Node.js to .NET Core]]></title>
            <link>https://www.dotnetweekly.com/articles/moving-from-nodejs-to-net-core</link>
            <guid>https://www.dotnetweekly.com/articles/moving-from-nodejs-to-net-core</guid>
            <pubDate>Mon, 27 May 2019 03:21:11 GMT</pubDate>
            <content:encoded><![CDATA[Here on Visual Studio App Center, our platform is built as a set of microservices, which has afforded teams to make language and platform choices that work best for them, and ultimately allowed us to move and iterate quickly. Over time, two distinct stacks have emerged: 

TypeScript/JavaScript running on Node.js, deployed to AKS (Azure Kubnernetes Service) 
.NET Framework (C#) running on Windows Service Fabric ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Visual interface for Azure Machine Learning service]]></title>
            <link>https://www.dotnetweekly.com/articles/visual-interface-for-azure-machine-learning-service</link>
            <guid>https://www.dotnetweekly.com/articles/visual-interface-for-azure-machine-learning-service</guid>
            <pubDate>Mon, 27 May 2019 03:20:37 GMT</pubDate>
            <content:encoded><![CDATA[During Microsoft Build we announced the preview of the visual interface for Azure Machine Learning service. This new drag-and-drop workflow capability in Azure Machine Learning service simplifies the process of building, testing, and deploying machine learning models for customers who prefer a visual experience to a coding experience. This capability brings the familiarity of what we already provide in our popular Azure Machine Learning Studio with significant improvements to ease the user experience.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SQL Server 2019 community technology preview 3.0 is now available]]></title>
            <link>https://www.dotnetweekly.com/articles/sql-server-2019-community-technology-preview-30-is-now-available</link>
            <guid>https://www.dotnetweekly.com/articles/sql-server-2019-community-technology-preview-30-is-now-available</guid>
            <pubDate>Mon, 27 May 2019 03:20:14 GMT</pubDate>
            <content:encoded><![CDATA[We’re excited to announce the monthly release of SQL Server 2019 community technology preview (CTP) 3.0. For customers in the Early Adoption Program, CTP 3.0 is the first release where you’re able to run SQL Server 2019 in production. To apply, please reach out to your assigned Program Manager for more information. Check out the What’s new in SQL Server 2019 preview documentation to learn more.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[.NET Core Diagnostics Overview]]></title>
            <link>https://www.dotnetweekly.com/articles/net-core-diagnostics-overview</link>
            <guid>https://www.dotnetweekly.com/articles/net-core-diagnostics-overview</guid>
            <pubDate>Mon, 27 May 2019 02:39:42 GMT</pubDate>
            <content:encoded><![CDATA[With .NET Full running on Windows we have grown accustomed to a plethora of great diagnostics tools ranging from dump generation and manual analysis to more sophisticated collection engines such as DebugDiag. As .NET core is picking up (cross platform) steam what types of diagnostics capabilities are available to us when we need to do production diagnostics? It turns out that a lot of work has been done in this area and specifically .net core 3 promises to bring a wide range of diagnostics capabilities.

]]></content:encoded>
        </item>
    </channel>
</rss>
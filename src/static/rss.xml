<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>dotNET Weekly - Week undefined Year undefined</title>
        <link>https://www.dotnetweekly.com/week/undefined/year/undefined?feed=rss</link>
        <description></description>
        <lastBuildDate>Wed, 25 Nov 2020 08:26:52 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <category>Articles</category>
        <category>Libraries-Tools</category>
        <item>
            <title><![CDATA[Improving your ASP.NET Core site's e-mailing capabilities]]></title>
            <link>https://www.dotnetweekly.com/articles/improving-your-aspnet-core-sites-e-mailing-capabilities</link>
            <guid>https://www.dotnetweekly.com/articles/improving-your-aspnet-core-sites-e-mailing-capabilities</guid>
            <pubDate>Wed, 25 Nov 2020 07:18:34 GMT</pubDate>
            <content:encoded><![CDATA[Many websites depend heavily on e-mail: they send account confirmation e-mails, password reset e-mails, order confirmations, back-in-stock notifications and much more. Despite its importance, I often see that sending e-mail is an overlooked area when writing well maintainable and stable code. It's also often overlooked when monitoring sites and lots of code I have seen just assumes the mail server is up and running. But problems will occur; mail servers will go down, passwords do expire or get changed without updating the web site and more.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What’s new in .NET Productivity]]></title>
            <link>https://www.dotnetweekly.com/articles/whats-new-in-net-productivity</link>
            <guid>https://www.dotnetweekly.com/articles/whats-new-in-net-productivity</guid>
            <pubDate>Wed, 25 Nov 2020 07:18:02 GMT</pubDate>
            <content:encoded><![CDATA[The .NET Productivity team (a.k.a. Roslyn) wants to help you be more productive! We’ve seen a lot of excitement in the past few months over our latest features which automate and reduce editing tasks to a single click and help save you time. In this post, I’ll cover some of the latest .NET productivity features available in Visual Studio 2019.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Generate Client for ASP.NET Core Web API using OpenAPI]]></title>
            <link>https://www.dotnetweekly.com/articles/generate-client-for-aspnet-core-web-api-using-openapi</link>
            <guid>https://www.dotnetweekly.com/articles/generate-client-for-aspnet-core-web-api-using-openapi</guid>
            <pubDate>Wed, 25 Nov 2020 07:16:18 GMT</pubDate>
            <content:encoded><![CDATA[Recently I talked about some of the new features in .NET 5.0 and preview versions of Visual Studio 16.8 and 16.9 with respect to ASP.NET Core Web API Projects. The first announcement I mentioned was the built-in support for OpenAPI and Swagger UI via Swashbuckle in the new ASP.NET Core 5 Web API Project Template, and the other announcement was a new feature introduced in Visual Studio 2019 that allows you to publish the web API to Azure API Management Services as part of the flow of publishing the ASP.NET Core Web API. Both of these tutorials mention Swashbuckle to generate the OpenAPI Specification Document. If you're generating an OpenAPI Specification Document for your ASP.NET Core Web API, you can use this same document to generate a client to consume your web API, which is what I will demonstrate in this ASP.NET Core Web API tutorial.

]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Astonishing Performance of .NET 5: More Data]]></title>
            <link>https://www.dotnetweekly.com/articles/astonishing-performance-of-net-5-more-data</link>
            <guid>https://www.dotnetweekly.com/articles/astonishing-performance-of-net-5-more-data</guid>
            <pubDate>Wed, 25 Nov 2020 07:13:29 GMT</pubDate>
            <content:encoded><![CDATA[The same day .NET 5 was released I shared a single screenshot showing how much faster .NET 5 is relatively to .NET Core 3.1. I promised to share more data later — and here it is.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Monitoring .NET scheduled tasks - Tools and alternatives]]></title>
            <link>https://www.dotnetweekly.com/articles/monitoring-net-scheduled-tasks-tools-and-alternatives</link>
            <guid>https://www.dotnetweekly.com/articles/monitoring-net-scheduled-tasks-tools-and-alternatives</guid>
            <pubDate>Tue, 24 Nov 2020 06:07:25 GMT</pubDate>
            <content:encoded><![CDATA[There's a lot of possibilities when it comes to developing scheduled tasks with .NET. This post is an overall guide to monitoring scheduled tasks.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Efficiently manage your YAML pipelines in Azure DevOps with reusable templates]]></title>
            <link>https://www.dotnetweekly.com/articles/efficiently-manage-your-yaml-pipelines-in-azure-devops-with-reusable-templates</link>
            <guid>https://www.dotnetweekly.com/articles/efficiently-manage-your-yaml-pipelines-in-azure-devops-with-reusable-templates</guid>
            <pubDate>Tue, 24 Nov 2020 02:05:21 GMT</pubDate>
            <content:encoded><![CDATA[Azure DevOps offers a powerful way to reuse parts of your build pipelines with YAML templates. Discover the recipe that I use in all my projects.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Event Sourcing on Azure – part 4: Integration events]]></title>
            <link>https://www.dotnetweekly.com/articles/event-sourcing-on-azure-part-4-integration-events</link>
            <guid>https://www.dotnetweekly.com/articles/event-sourcing-on-azure-part-4-integration-events</guid>
            <pubDate>Mon, 23 Nov 2020 18:06:52 GMT</pubDate>
            <content:encoded><![CDATA[Hi All! Welcome back for the fourth part of the Event Sourcing on Azure series. Today we’ll see how we can send Integration events every time something changes.

Read the full article here: https://www.davideguida.com/event-sourcing-on-azure-part-4-integration-events/]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ToastNotify - Elegant and Minimal Notifications Toast for your ASP.NET Core ]]></title>
            <link>https://www.dotnetweekly.com/articles/toastnotify-elegant-and-minimal-notifications-toast-for-your-aspnet-core</link>
            <guid>https://www.dotnetweekly.com/articles/toastnotify-elegant-and-minimal-notifications-toast-for-your-aspnet-core</guid>
            <pubDate>Mon, 23 Nov 2020 15:10:32 GMT</pubDate>
            <content:encoded><![CDATA[ToastNotify - Here is an Elegant and Minimal Notification Toast for your ASP.NET Core Web Applications. Compatible with ASP.NET Core 3.1 and .NET 5 Web Applications.
Features
- Can be Invoked via C#
- Global Settings (Toast Positions and Durations) can be set while registering the service.
- Dismission Duration can be set for each toast if needed.
- Easy to Plugin with any Existing Application.
- Customizable. Clean. Elegant
- Supports 5 Different Modes: Success, Error, Warning, Information, Custom
- Custom mode allows you to change the look and feel of the toast including icon and background color.
- More Features coming soon.

For Usage and Implementation Documentation - refer tohttps://github.com/iammukeshm/CoreEssentials/tree/master/CoreEssentials.ToastNotify
Do not forget to leave a star.]]></content:encoded>
        </item>
    </channel>
</rss>